{"version":3,"sources":["components/OutputData.jsx","api/api.jsx","components/ButtonQuery.jsx","components/Input.jsx","App.js","serviceWorker.js","index.js"],"names":["OutputData","props","outPutlaunches","launches","map","el","key","id","className","mission_name","launch_date_local","slice","launch_site","site_name_long","rocket","rocket_name","links","flickr_images","im","src","alt","launchesAPI","inputText","method","headers","body","JSON","stringify","query","variables","launch_year","ButtonQuery","useState","setLaunches","request","setRequest","isSending","setIsSendRequest","useEffect","fetch","then","res","json","data","launchesPast","type","value","onClick","Input","setText","placeholder","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gRAqBeA,G,MAjBI,SAACC,GAEpB,IAAIC,EAAiBD,EAAME,SAASC,KAAI,SAAAC,GAAE,OAAI,yBAAKC,IAAKD,EAAGE,GAAIC,UAAU,YACrE,4BAAK,4DAAiBH,EAAGI,cACzB,2BAAI,8EAAoBJ,EAAGK,kBAAkBC,MAAM,KACnD,2BAAI,yHAA4BN,EAAGO,YAAYC,gBAC/C,2BAAI,0FAAsBR,EAAGS,OAAOC,aAEpC,yBAAKP,UAAU,OAAM,yBAAKA,UAAU,UAAUH,EAAGW,MAAMC,cAAcb,KAAI,SAAAc,GAAE,OAC7E,yBAAKC,IAAKD,EAAIZ,IAAKY,EAAIE,IAAKf,EAAGS,OAAOC,uBAGpC,OACA,6BAAMb,KCjBGmB,EAAc,SACXC,GACR,MACI,CACEC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBC,MAAM,ojBAeFC,UAAW,CACbC,YAAaR,OCYlBS,EA/BK,SAAC9B,GAAW,IAAD,EACE+B,mBAAS,IADX,mBACvB7B,EADuB,KACb8B,EADa,OAEDD,mBAAS,IAFR,mBAExBE,EAFwB,KAEfC,EAFe,OAGOH,oBAAS,GAHhB,mBAGxBI,EAHwB,KAGbC,EAHa,KAM9BC,qBAAU,WACJF,GACHG,MAAM,mCAAoClB,EAAwBpB,EAAMqB,YACvEkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIV,EAAYU,EAAKA,KAAKC,mBAEnC,CAACV,IASF,OACI,6BACI,2BAAOW,KAAM,SAAUC,MAAO,KAAMC,QAR3B,WAChB9C,EAAMqB,YACTe,GAAiB,GACfF,EAAWlC,EAAMqB,eAMT,6BACE,kBAAC,EAAD,CAAYnB,SAAUA,OCRrB6C,EAlBD,WAAO,IAAD,EAEahB,mBAAS,IAFtB,mBAETV,EAFS,KAEE2B,EAFF,KAOhB,OACI,yBAAKzC,UAAU,SACX,oQACA,2BAAO0C,YAAa,gEAAeL,KAAM,OAAQC,MAAOxB,EAAW6B,SANxD,SAAC,GAAuB,IAAbL,EAAY,EAArBM,OAASN,MAC1BG,EAAQH,MAMJ,6BACI,kBAAC,EAAD,CAAaxB,UAAWA,OCHzB+B,MARf,WACE,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,QCKc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c64aa2e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './OutputData.css';\r\n\r\n\r\nconst OutputData = (props) => {\r\n\r\nlet outPutlaunches = props.launches.map(el => <div key={el.id} className='launches'>\r\n    <h3>{\"Имя миссии: \" + el.mission_name}</h3>\r\n    <p>{\"Время запуска: \" + el.launch_date_local.slice(11)}</p>\r\n    <p>{\"Платформа для запуска: \" + el.launch_site.site_name_long}</p>\r\n    <p>{\"Название ракеты: \" + el.rocket.rocket_name}</p>\r\n    \r\n    <div className=\"row\"><div className=\"column\">{el.links.flickr_images.map(im =>\r\n  <img src={im} key={im} alt={el.rocket.rocket_name}></img>)}</div></div> \r\n   </div>)\r\n   \r\n    return (\r\n    <div>{outPutlaunches}</div>\r\n    )\r\n}\r\n\r\nexport default OutputData;","export const launchesAPI = {\r\n    getLaunches(inputText){\r\n        return (\r\n            {\r\n              method: 'POST',\r\n              headers: {\"Content-Type\": \"application/json\"},\r\n              body: JSON.stringify({\r\n                  query: `query getLaunches($launch_year: String) {\r\n                    launchesPast(limit: 10, find: {launch_year: $launch_year}) {\r\n                      mission_name\r\n                      launch_date_local\r\n                      launch_site {\r\n                        site_name_long\r\n                      }\r\n                      links {\r\n                        flickr_images\r\n                      }\r\n                      rocket {\r\n                        rocket_name\r\n                      }\r\n                      id\r\n                    }\r\n                  }`, variables: {\r\n                    launch_year: inputText\r\n                  }   \r\n              }), \r\n            }\r\n          )\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport OutputData from './OutputData';\r\nimport {launchesAPI} from '../api/api';\r\n\r\nconst ButtonQuery = (props) => {\r\nconst  [launches, setLaunches] = useState([])\r\nconst [request, setRequest] = useState('');\r\nconst [isSending, setIsSendRequest] = useState(false);\r\n\r\n  \r\n useEffect(() => {\r\n    if(isSending) {\r\n    fetch('https://api.spacex.land/graphql/', launchesAPI.getLaunches(props.inputText))\r\n    .then(res => res.json())\r\n    .then(data => setLaunches(data.data.launchesPast)) \r\n    }\r\n  }, [request]);\r\n\r\n  \r\nlet  onClickButton = () => {\r\n  if(props.inputText){\r\n  setIsSendRequest(true)\r\n    setRequest(props.inputText)\r\n  }\r\n}\r\n    return (\r\n        <div>\r\n            <input type={'button'} value={'Ok'} onClick={onClickButton} />\r\n            <div>\r\n              <OutputData launches={launches} />\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ButtonQuery;","import React, {useState} from 'react';\r\nimport ButtonQuery from './ButtonQuery';\r\n\r\nconst Input = () => {\r\n \r\n    const [inputText, setText] = useState('');\r\n    \r\n    let onChangeText = ({target: {value}}) => {\r\n        setText(value)\r\n    }\r\n    return (\r\n        <div className='input'>\r\n            <h2>Введите год вылета ракет начиная от 2006-го года</h2>\r\n            <input placeholder={'Введите год'} type={'text'} value={inputText} onChange={onChangeText}/>\r\n            <div>\r\n                <ButtonQuery inputText={inputText} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React from 'react';\nimport './App.css';\nimport Input from './components/Input';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Input />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}